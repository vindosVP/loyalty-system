// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vindosVP/loyalty-system/internal/models"
)

// OrderRepo is an autogenerated mock type for the OrderRepo type
type OrderRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *OrderRepo) Create(ctx context.Context, order *models.Order) (*models.Order, error) {
	ret := _m.Called(ctx, order)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) (*models.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) *models.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, id
func (_m *OrderRepo) Exists(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *OrderRepo) GetByID(ctx context.Context, id int) (*models.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnprocessedOrders provides a mock function with given fields: ctx
func (_m *OrderRepo) GetUnprocessedOrders(ctx context.Context) ([]int, error) {
	ret := _m.Called(ctx)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersCurrentBalance provides a mock function with given fields: ctx, userID
func (_m *OrderRepo) GetUsersCurrentBalance(ctx context.Context, userID int) (float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersOrders provides a mock function with given fields: ctx, userID
func (_m *OrderRepo) GetUsersOrders(ctx context.Context, userID int) ([]*models.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersWithdrawals provides a mock function with given fields: ctx, userID
func (_m *OrderRepo) GetUsersWithdrawals(ctx context.Context, userID int) ([]*models.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersWithdrawnBalance provides a mock function with given fields: ctx, userID
func (_m *OrderRepo) GetUsersWithdrawnBalance(ctx context.Context, userID int) (float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, id, status, sum
func (_m *OrderRepo) UpdateOrder(ctx context.Context, id int, status string, sum float64) (*models.Order, error) {
	ret := _m.Called(ctx, id, status, sum)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) (*models.Order, error)); ok {
		return rf(ctx, id, status, sum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) *models.Order); ok {
		r0 = rf(ctx, id, status, sum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, float64) error); ok {
		r1 = rf(ctx, id, status, sum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepo creates a new instance of OrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepo(t mockConstructorTestingTNewOrderRepo) *OrderRepo {
	mock := &OrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
